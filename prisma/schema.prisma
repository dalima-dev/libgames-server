generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Game {
  id                 String @id @default(uuid())
  title              String @unique
  coverImageUrl      String @map("cover_image_url")
  description        String
  year               Int
  imdbScore          Int    @map("imdb_score")
  trailerYoutubeUrl  String @map("trailer_youtube_url")
  gameplayYoutubeUrl String @map("gameplay_youtube_url")

  genders GameGender[]

  profiles ProfileGame[]

  @@map("game")
}

model Gender {
  id   Int    @id @default(autoincrement())
  name String @unique

  games GameGender[]

  @@map("gender")
}

model GameGender {
  game   Game   @relation(fields: [gameId], references: [id])
  gameId String @map("game_id")

  gender   Gender @relation(fields: [genderId], references: [id], onDelete: Cascade)
  genderId Int    @map("gender_id")

  @@id([gameId, genderId])
  @@map("gender_to_game")
}

model User {
  id       String  @id @default(uuid())
  nickname String  @unique
  email    String  @unique
  password String
  cpf      String
  isAdmin  Boolean @map("is_admin")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  profiles Profile[]

  @@map("user")
}

model Profile {
  id       Int    @id @default(autoincrement())
  title    String @unique
  imageUrl String @map("image_url")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  favoriteGames ProfileGame[]

  @@map("profile")
}

model ProfileGame {
  game   Game   @relation(fields: [gameId], references: [id])
  gameId String @map("game_id")

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId Int     @map("profile_id")

  @@id([gameId, profileId])
  @@map("profile_to_game")
}
